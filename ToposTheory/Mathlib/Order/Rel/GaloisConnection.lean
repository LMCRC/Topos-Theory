/-
Copyright (c) 2024 Lagrange Mathematics and Computing Research Center. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Anthony Bordg
-/
import Mathlib.Data.Rel
import Mathlib.Order.GaloisConnection
import Mathlib.CategoryTheory.Limits.Shapes.Pullback.HasPullback
import ToposTheory.GrothendieckSubtopos
import ToposTheory.Saturation

/-!
# The Galois Connection Induced by a Relation

In this file, we show that an arbitrary relation `R` between a pair of types `Œ±` and `Œ≤` defines
a pair `toDual ‚àò R.leftDual` and `R.rightDual ‚àò ofDual` of adjoint order-preserving maps between the
corresponding posets `Set Œ±` and `(Set Œ≤)·µí·µà`.
We define `R.leftFixedPoints` (resp. `R.rightFixedPoints`) as the set of fixed points `J`
(resp. `I`) of `Set Œ±` (resp. `Set Œ≤`) such that `rightDual (leftDual J) = J`
(resp. `leftDual (rightDual I) = I`).

## Main Results

‚ãÜ `Rel.gc_leftDual_rightDual`: we prove that the maps `toDual ‚àò R.leftDual` and
  `R.rightDual ‚àò ofDual` form a Galois connection.
‚ãÜ `Rel.equivFixedPoints`: we prove that the maps `R.leftDual` and `R.rightDual` induce inverse
  bijections between the sets of fixed points.

## References

‚ãÜ Engendrement de topologies, d√©montrabilit√© et op√©rations sur les sous-topos, Olivia Caramello and
  Laurent Lafforgue (in preparation)

## Tags

relation, Galois connection, induced bijection, fixed points
-/

namespace Rel

variable {Œ± Œ≤ : Type*} (R : Rel Œ± Œ≤)

/-! ### Pairs of adjoint maps defined by relations -/

open OrderDual

/-- `leftDual` maps any set `J` of elements of type `Œ±` to the set `{b : Œ≤ | ‚àÄ a ‚àà J, R a b}` of
elements `b` of type `Œ≤` such that `R a b` for every element `a` of `J`. -/
def leftDual (J : Set Œ±) : Set Œ≤ := {b : Œ≤ | ‚àÄ ‚¶Éa‚¶Ñ, a ‚àà J ‚Üí R a b}

/-- `rightDual` maps any set `I` of elements of type `Œ≤` to the set `{a : Œ± | ‚àÄ b ‚àà I, R a b}`
of elements `a` of type `Œ±` such that `R a b` for every element `b` of `I`. -/
def rightDual (I : Set Œ≤) : Set Œ± := {a : Œ± | ‚àÄ ‚¶Éb‚¶Ñ, b ‚àà I ‚Üí R a b}

/-- The pair of functions `toDual ‚àò leftDual` and `rightDual ‚àò ofDual` forms a Galois connection. -/
theorem gc_leftDual_rightDual : GaloisConnection (toDual ‚àò R.leftDual) (R.rightDual ‚àò ofDual) :=
  fun J I ‚Ü¶ ‚ü®fun h a ha b hb ‚Ü¶ h (by simpa) ha, fun h b hb a ha ‚Ü¶ h (by simpa) hb‚ü©

/-! ### Induced equivalences between fixed points -/

/-- `leftFixedPoints` is the set of elements `J : Set Œ±` satisfying `rightDual (leftDual J) = J`. -/
def leftFixedPoints := {J : Set Œ± | R.rightDual (R.leftDual J) = J}

/-- `rightFixedPoints` is the set of elements `I : Set Œ≤` satisfying `leftDual (rightDual I) = I`.
-/
def rightFixedPoints := {I : Set Œ≤ | R.leftDual (R.rightDual I) = I}

open GaloisConnection

/-- `leftDual` maps every element `J` to `rightFixedPoints`. -/
theorem leftDual_mem_rightFixedPoint (J : Set Œ±) : R.leftDual J ‚àà R.rightFixedPoints := by
  apply le_antisymm
  ¬∑ apply R.gc_leftDual_rightDual.monotone_l; exact R.gc_leftDual_rightDual.le_u_l J
  ¬∑ exact R.gc_leftDual_rightDual.l_u_le (R.leftDual J)

/-- `rightDual` maps every element `I` to `leftFixedPoints`. -/
theorem rightDual_mem_leftFixedPoint (I : Set Œ≤) : R.rightDual I ‚àà R.leftFixedPoints := by
  apply le_antisymm
  ¬∑ apply R.gc_leftDual_rightDual.monotone_u; exact R.gc_leftDual_rightDual.l_u_le I
  ¬∑ exact R.gc_leftDual_rightDual.le_u_l (R.rightDual I)

/-- The maps `leftDual` and `rightDual` induce inverse bijections between the sets of fixed points.
-/
def equivFixedPoints : R.leftFixedPoints ‚âÉ R.rightFixedPoints where
  toFun := fun ‚ü®J, _‚ü© => ‚ü®R.leftDual J, R.leftDual_mem_rightFixedPoint J‚ü©
  invFun := fun ‚ü®I, _‚ü© => ‚ü®R.rightDual I, R.rightDual_mem_leftFixedPoint I‚ü©
  left_inv J := by obtain ‚ü®_, hJ‚ü© := J; rw [Subtype.mk.injEq, hJ]
  right_inv I := by obtain ‚ü®_, hI‚ü© := I; rw [Subtype.mk.injEq, hI]

theorem rightDual_leftDual_le_of_le {J J' : Set Œ±} (h : J' ‚àà R.leftFixedPoints) (h‚ÇÅ : J ‚â§ J') :
    R.rightDual (R.leftDual J) ‚â§ J' := by
  rw [‚Üê h]
  apply R.gc_leftDual_rightDual.monotone_u
  apply R.gc_leftDual_rightDual.monotone_l
  exact h‚ÇÅ

theorem leftDual_rightDual_le_of_le {I I' : Set Œ≤} (h : I' ‚àà R.rightFixedPoints) (h‚ÇÅ : I ‚â§ I') :
    R.leftDual (R.rightDual I) ‚â§ I' := by
  rw [‚Üê h]
  apply R.gc_leftDual_rightDual.monotone_l
  apply R.gc_leftDual_rightDual.monotone_u
  exact h‚ÇÅ

end Rel

open CategoryTheory Opposite

namespace Subtopos

/-! ### The induced duality of topologies and subtoposes -/

universe u

variable {C : Type u} [SmallCategory C]

open Limits NatTrans Rel

def restrictionMap {X : C} (S : Sieve X) {X' : C} (f : X' ‚ü∂ X) :
    (coyoneda.obj (op (yoneda.obj X'))) ‚ü∂ (coyoneda.obj (op (S.pullback f).functor)) :=
  coyoneda.map (S.pullback f).functorInclusion.op

def restrictionMap' {X : C} (S : Sieve X):
    (coyoneda.obj (op (yoneda.obj X))) ‚ü∂ (coyoneda.obj (op S.functor)) :=
  coyoneda.map S.functorInclusion.op

def isIso_restrictionMap (XS : (X : C) √ó Sieve X) (P : C·µí·µñ ‚•§ Type u) : Prop :=
  ‚àÄ {X' : C} (f : X' ‚ü∂ XS.1), IsIso ((restrictionMap XS.2 f).app P)

lemma isIso_restrictionMap'_of_isIso_restrictionMap {XS : (X : C) √ó Sieve X} {P : C·µí·µñ ‚•§ Type u} (h : isIso_restrictionMap XS P) :
    IsIso ((restrictionMap' XS.2).app P) := by
  have := h (ùüô _)
  simp [restrictionMap] at this
  rw [Sieve.pullback_id] at this
  unfold restrictionMap'
  exact this

theorem isIso_restrictionMap_iff_isSheafFor {X : C} (S : Sieve X) :
    (‚àÄ {X' : C} (f : X' ‚ü∂ X), Presieve.IsSheafFor P (S.pullback f).arrows) ‚Üî isIso_restrictionMap ‚ü®X, S‚ü© P := by
  conv =>
    lhs
    ext X' f
    rw [Presieve.isSheafFor_iff_yonedaSheafCondition]
    unfold Presieve.YonedaSheafCondition
  conv =>
    rhs
    unfold isIso_restrictionMap
    simp [restrictionMap, isIso_iff_bijective, Function.bijective_iff_existsUnique]

theorem mem_leftFixedPoint (J : GrothendieckTopology C) :
    {‚ü®X, S‚ü© : (X : C) √ó Sieve X | S ‚àà J.sieves X} ‚àà (leftFixedPoints isIso_restrictionMap) := by
  ext ‚ü®X, S‚ü©
  simp [leftFixedPoints, leftDual, rightDual]
  apply Iff.intro
  . rw [‚Üê Presheaf.sheaves_respect_iff_covering]
    intros h P hP
    have: (‚àÄ {X' : C} (f : X' ‚ü∂ X), Presieve.IsSheafFor P (S.pullback f).arrows) := by
      rw [isIso_restrictionMap_iff_isSheafFor]
      apply h
      intros YS hYS
      obtain ‚ü®Y, S'‚ü© := YS
      rw [‚Üê isIso_restrictionMap_iff_isSheafFor]
      intros _ f
      exact hP.isSheafFor (S'.pullback f) (J.pullback_stable f hYS)
    have := this (ùüô _)
    rw [Sieve.pullback_id] at this
    exact this
  . tauto

def yoneda_iso_top_functor (X : C) : yoneda.obj X ‚âÖ Sieve.functor (X := X) ‚ä§ :=
  NatIso.ofComponents (fun X' ‚Ü¶ by simp; exact Equiv.toIso {
    toFun := fun f ‚Ü¶ ‚ü®f, trivial‚ü©
    invFun := fun g ‚Ü¶ g.1
    left_inv := by tauto
    right_inv := by tauto
  })

lemma isIso_restrictionMap_top (X : C) (P : C·µí·µñ ‚•§ Type u) : isIso_restrictionMap ‚ü®X, ‚ä§‚ü© P := by
  unfold isIso_restrictionMap restrictionMap
  intros X' f
  use (fun g ‚Ü¶ by
    simp at g
    exact (yoneda_iso_top_functor X').hom ‚â´ g)
  aesop_cat

lemma isIso_restrictionMap_pullback {X : C} (S : Sieve X) (P : C ·µí·µñ ‚•§ Type u)
    (h : isIso_restrictionMap ‚ü®X, S‚ü© P) {Y : C} (f : Y ‚ü∂ X) : isIso_restrictionMap ‚ü®Y, S.pullback f‚ü© P := by
  unfold isIso_restrictionMap restrictionMap
  intros Z g
  rw [‚Üê Sieve.pullback_comp]
  exact h (g ‚â´ f)

--TODO(@doctorn) move this out
namespace Sieve

  def pullbackInclusion {X : C} (S : Sieve X) {Y : C} (f : Y ‚ü∂ X) :
      (S.pullback f).functor ‚ü∂ S.functor := by
    simp [Sieve.functor, Sieve.pullback]
    exact { app := fun Z ‚Ü¶ fun ‚ü®g, hg‚ü© ‚Ü¶ ‚ü®g ‚â´ f, hg‚ü© }

  def compPullbackInclusionIso {X : C} (S : Sieve X) {Y Z : C} (f : Y ‚ü∂ X) (g : Z ‚ü∂ Y) :
      (S.pullback (g ‚â´ f)).functor ‚âÖ ((S.pullback f).pullback g).functor := by
    have := Sieve.pullback_comp S (f := f) (g := g)
    have := congrArg (fun S ‚Ü¶ S.functor) this
    exact eqToIso this
end Sieve

--TODO(@doctorn) rename this
def descends {X : C} (S R : Sieve X) (P : C ·µí·µñ ‚•§ Type u) : Prop :=
  ‚àÄ {Y : C} {f : Y ‚ü∂ X}, S.arrows f ‚Üí isIso_restrictionMap ‚ü®Y, R.pullback f‚ü© P

lemma descends_of_pullback {X : C} {S R : Sieve X} {P : C ·µí·µñ ‚•§ Type u} (hR : descends S R P) {Y : C} (f : Y ‚ü∂ X) :
    descends (S.pullback f) (R.pullback f) P := by
  intros Z g hg
  rw [‚Üê Sieve.pullback_comp]
  unfold isIso_restrictionMap
  intros W h
  exact hR hg h

lemma isIso_restrictionMap_transitive {X : C} (S R : Sieve X) (P : C ·µí·µñ ‚•§ Type u)
    (hS : isIso_restrictionMap ‚ü®X, S‚ü© P) (hR : descends S R P) : isIso_restrictionMap ‚ü®X, R‚ü© P := by
  -- Restrictions of the two sieves at P
  let i := (restrictionMap' S).app P
  let j := (restrictionMap' R).app P
  -- We immediately know i is an isomorphism
  have := isIso_restrictionMap'_of_isIso_restrictionMap hS
  -- Recall the Yoneda lemma
  let Œ∏ := curriedYonedaLemma'.app P
  -- Aliases for pullback inclusion
  let Œπ : ‚àÄ {X Y : C} (R : Sieve X) (g : Y ‚ü∂ X), ((R.pullback g).functor ‚ü∂ R.functor) := fun R g ‚Ü¶ Sieve.pullbackInclusion R g
  let Œ± : ‚àÄ {Y Z : C} (g : Y ‚ü∂ X) (h : Z ‚ü∂ Y), (R.pullback (h ‚â´ g)).functor ‚âÖ ((R.pullback g).pullback h).functor :=
    fun g h ‚Ü¶ Sieve.compPullbackInclusionIso R g h
  -- First projection
  let œÄ : ‚àÄ {Y : C} (g : Y ‚ü∂ X), (R.pullback g).functor ‚ü∂ yoneda.obj Y := fun g ‚Ü¶ (R.pullback g).functorInclusion
  -- Composition lemma
  have composition: ‚àÄ {Y Z : C} (g : Y ‚ü∂ X) (h : Z ‚ü∂ Y), (Œ± g h).hom ‚â´ Œπ (R.pullback g) h ‚â´ Œπ R g = Œπ R (h ‚â´ g) := sorry
  -- Naturality lemma
  have naturality: ‚àÄ {Y Z : C} (g : Y ‚ü∂ X) (h : Z ‚ü∂ Y), œÄ (h ‚â´ g) ‚â´ yoneda.map h = (Œ± g h).hom ‚â´ Œπ (R.pullback g) h ‚â´ œÄ g := sorry
  -- Restriction map for pullback sieve
  let œÅ : ‚àÄ {Y : C} {g : Y ‚ü∂ X}, S.arrows g ‚Üí ((yoneda.obj Y ‚ü∂ P) ‚âÖ ((R.pullback g).functor ‚ü∂ P)) := by
    intros Y g hg
    have := isIso_restrictionMap'_of_isIso_restrictionMap (hR hg)
    exact asIso ((restrictionMap' (R.pullback g)).app P)
  -- Construction of elements from matching families
  let Œ∑ : (R.functor ‚ü∂ P) ‚Üí (S.functor ‚ü∂ (yoneda.op ‚ãô (yoneda.obj P))) := fun p ‚Ü¶ {
    app := fun Y ‚ü®g, hg‚ü© ‚Ü¶ (œÅ hg).inv (Œπ R g ‚â´ p)
    naturality := by
      intros Y Z h
      ext ‚ü®g, hg‚ü©
      simp

      have hgh := S.downward_closed hg h.unop
      have := by
        calc (œÅ hgh).hom (yoneda.map h.unop ‚â´ (œÅ hg).inv (Œπ R g ‚â´ p))
          _ = œÄ (h.unop ‚â´ g) ‚â´ yoneda.map h.unop ‚â´ (œÅ hg).inv (Œπ R g ‚â´ p) := by aesop_cat
          _ = (œÄ (h.unop ‚â´ g) ‚â´ yoneda.map h.unop) ‚â´ (œÅ hg).inv (Œπ R g ‚â´ p) := by rw [Category.assoc]
          _ = ((Œ± g h.unop).hom ‚â´ Œπ (R.pullback g) h.unop ‚â´ œÄ g) ‚â´ (œÅ hg).inv (Œπ R g ‚â´ p) := by rw [naturality]
          _ = (Œ± g h.unop).hom ‚â´ Œπ (R.pullback g) h.unop ‚â´ (œÅ hg).hom ((œÅ hg).inv (Œπ R g ‚â´ p)) := by aesop_cat
          _ = Œπ R (h.unop ‚â´ g) ‚â´ p := by simp [‚Üê composition]

      simp [‚Üê this]
  }
  -- Yoneda of previous construction
  let œÉ : (R.functor ‚ü∂ P) ‚Üí (S.functor ‚ü∂ P) := fun p ‚Ü¶ Œ∑ p ‚â´ Œ∏.hom

  have: IsIso j := sorry

  sorry
  -- unfold isIso_restrictionMap restrictionMap
  -- intros Y f
  -- unfold isIso_restrictionMap at hS

  -- have := hS f
  -- have hRf: descends (S.pullback f) (R.pullback f) P := descends_of_pullback hR f

  -- rw [isIso_iff_bijective, Function.bijective_iff_existsUnique]
  -- intro p
  -- use inv ((restrictionMap S f).app P) (inducedFamily hRf p)
  -- apply And.intro
  -- . sorry
  -- . intros q hq
  --   sorry

instance instGrothendieckTopologyOfleftFixedPoint {J : Set ((X : C) √ó Sieve X)}
    (h : J ‚àà leftFixedPoints isIso_restrictionMap) : GrothendieckTopology C := by
  simp [leftFixedPoints, rightDual, leftDual] at h
  apply GrothendieckTopology.mk (fun X ‚Ü¶ {S : Sieve X | ‚ü®X, S‚ü© ‚àà J})
  . intros X
    rw [‚Üê h]
    intros P _
    exact isIso_restrictionMap_top X P
  . intros _ _ S f hS
    rw [‚Üê h]
    intros P hP
    exact isIso_restrictionMap_pullback S P (hP hS) f
  . intros _ S _ R _
    rw [‚Üê h]
    intros P _
    exact isIso_restrictionMap_transitive S R P (by tauto) (by tauto)

-- open GrothendieckTopos

-- variable {I : Set (C·µí·µñ ‚•§ Type u)}

-- theorem mem_rightFixedPoint (‚Ñ∞ : Subtopos (C·µí·µñ ‚•§ Type u)) (h : ‚àÄ P, ‚Ñ∞.obj P ‚Üî P ‚àà I) :
--     I ‚àà rightFixedPoints isIso_restrictionMap := sorry

-- instance subtopos_of_rightFixedPoint (h : I ‚àà rightFixedPoints isIso_restrictionMap) :
--     Subtopos (C·µí·µñ ‚•§ Type u) where
--   obj P := P ‚àà I
--   adj := sorry
--   flat := sorry
--   mem := sorry

-- instance : GrothendieckTopology C ‚âÉ Subtopos (C·µí·µñ ‚•§ Type u) := sorry

end Subtopos
